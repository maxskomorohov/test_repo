* * *  SCM  * * *

SCM (Software Configuration Management) - управление исходным кодом, включает в себя:
    * Контроль версий (изменений / коммитов)
    * Управление конфигурациями
    * Слияние и разрешение конфликтов

Правила нейминга:

    1. Использование префиксов для категорий. Разделение веток на категории помогает быстро понять цель ветки.
    	•	feature/ — для функциональных веток (например, новая функция или улучшение).
            Пример: feature/user-authentication
	    •	bugfix/ — для исправлений ошибок.
            Пример: bugfix/fix-login-error
	    •	hotfix/ — для критичных исправлений, которые должны быть быстро развернуты.
            Пример: hotfix/critical-fix-payment-bug
	    •	release/ — для веток, которые содержат код для новой версии или релиза.
            Пример: release/v1.2.0
	    •	test/ — для веток, связанных с тестированием.
            Пример: test/integration-tests
	    •	chore/ — для изменений, которые не затрагивают функциональность (например, рефакторинг или обновление
	        зависимостей).
            Пример: chore/update-dependencies

    2. Использование номера задачи
       Когда используется система управления проектами (например, Jira), полезно включить в название ветки номер
       задачи или тикета.
       Пример: feature/123-add-login-form

    3. Использование дефисов для разделения слов
       Используйте дефисы (не подчеркивания) для разделения слов в названиях веток. Это улучшает читаемость.
       Пример: feature/add-user-profile

    4. Маленькие буквы и стандартный стиль
       Ветку обычно называют с использованием маленьких букв, а слова разделяются дефисами. Это делает название
       ветки читабельным и однородным.
       Пример: feature/user-profile-update

    5. Не использовать специальные символы
       Избегайте использования специальных символов, таких как пробелы, запятые или знаки препинания, в
       названиях веток. Это может привести к ошибкам в некоторых системах или инструментах.

    6. Ясность и краткость
       Название ветки должно быть ясным и лаконичным. Оно должно описывать цель ветки, но не быть слишком длинным.
       Пример: вместо feature/working-on-new-ui-for-user-authentication-page лучше использовать
       feature/new-ui-authentication.

    7. Группировка по функциональным частям
       В некоторых случаях полезно организовывать ветки по функциональным частям или модулям проекта:
       Пример: feature/user-management/add-login или bugfix/payment-gateway/fix-crash

    Примеры правильных имен веток:
	    •	feature/login-page-design
	    •	bugfix/checkout-form-validation
	    •	release/1.0.0
	    •	hotfix/fix-image-upload

Лучшие практики SCM:
    * частые коммиты (чем чаще, тем лучше)
    * коммиты кратные задаче, фиче, новой функции, класса, исправлению бага
    * коммиты только полезного кода (не черновиков, тестовых файлов и т.д.)
    * работа с актуальными кодом (перед любым коммитом нужно проверить последняя ли версия репы скачана локально)
    * при использовании заглушек использовать нейминг, который легко найти в проекте (elephant)
    * развернутые комментарии к коммитам (не только что сделано, но и почему)
    * новые ветки кратные багу, фиче и т.д. (откат до ветки с проблемой, новая ветка он нее и коммит с веткой)
    * ветка обычно создается тогда, когда планируется более одного коммита





